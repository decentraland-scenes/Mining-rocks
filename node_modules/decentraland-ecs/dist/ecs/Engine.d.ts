import { Entity } from './Entity';
import { DisposableComponentLike, ComponentConstructor } from './Component';
import { ISystem } from './System';
import { EventManager } from './EventManager';
import { ComponentGroup } from './ComponentGroup';
/**
 * @public
 */
export declare class Engine {
    readonly eventManager: EventManager;
    readonly rootEntity: Entity;
    private readonly _entities;
    private readonly _disposableComponents;
    private readonly _componentGroups;
    private readonly simpleSystems;
    readonly entities: Readonly<Record<string, Entity>>;
    readonly disposableComponents: Readonly<Record<string, DisposableComponentLike>>;
    constructor();
    addEntity(entity: Entity): void;
    removeEntity(entity: Entity, removeChildren?: boolean, newParent?: Entity): void;
    addSystem(system: ISystem, priority?: number): void;
    removeSystem(system: ISystem): void;
    update(dt: number): void;
    getEntitiesWithComponent(component: string): Record<string, any>;
    getEntitiesWithComponent(component: ComponentConstructor<any>): Record<string, Entity>;
    registerComponent(component: DisposableComponentLike): void;
    disposeComponent(component: DisposableComponentLike): void;
    updateComponent(component: DisposableComponentLike): void;
    getComponentGroup(...requires: ComponentConstructor<any>[]): ComponentGroup;
    removeComponentGroup(componentGroup: ComponentGroup): void;
    private registerSystem;
    private checkRequirementsAndAdd;
    private checkRequirements;
    private componentAddedHandler;
    private componentRemovedHandler;
}
